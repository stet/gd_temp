'\" t
.\"     Title: Bitcoin Toolkit
.\"    Author: [see the "Authors" section]
.\"      Date: 01/18/2023
.\"    Manual: Bitcoin Toolkit Manual
.\"    Source: Bitcoin Toolkit 3.1.2
.\"  Language: English
.\"
.TH "BTK" "1" "12/11/2023" "Bitcoin Toolkit 3.1.2" "Bitcoin Toolkit Manual"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
btk \- Assortment of bitcoin-related command-line tools.
.SH "SYNOPSIS"
.sp
.nf
\fIbtk\fR <command> [<option> ...] [<input> ...]`
.fi

.sp
.SH "DESCRIPTION"

.sp
Bitcoin Toolkit is a collection of command line tools for working with the Bitcoin network and blockchain. Some capabilities include creating and generating and manipulating public and private keys, generating addresses, querying info from remote bitcoin nodes, and mining blockchain data.
.sp
The first argument to btk is considered to be the command. All arguments following the command are a mix of command options and input items. Command options are preceded with a hyphen. Any non-option argument is considered to be an input item. See the COMMANDS section below for a list of btk commands and a brief overview. See \fIbtk help\fR <command> for more detailed info about a specific command.
.sp
When required, input can be a single item or a list of items. Input items can be supplied as command arguments or with input redirection (i.e. pipe). In the case of command arguments, all non-option arguments after the \fIcommand\fR argument are considered to be input items. In the case where input is supplied with input redirection, input is expected to conform to one of three formats: 1) a single string or a list of strings delimited by a newline char, 2) a json array containing one or more strings, or 3) unstructured binary data. Btk will auto-determine the input format if it can be determined with a reasonable degree of certainty. If not, you can supply a command option to explicitly state the input format.
.sp
One or more output items are usually produced for each input item, and like input, it usually conforms to the same three formats. By default, output will be formatted as a json array.
.sp
There is no difference in the way btk processes a list of strings delimited by a newline character or a list of strings contained within a json array. These options are for the sake of both convenience and interoperability with other systems, programs, and scripts.

.sp
.SH "INPUT EXAMPLES"

.sp
Input as a command argument:
.sp
.RS 4
.nf
$ btk privkey "my secret passphrase"
[
  "L2r6oCckVhNjAH9qqhteY8P4vH9zRDFCWnzqz35gbcSvjmoroFmD"
]
.fi
.RE

.sp
Input from a pipe:
.sp
.RS 4
.nf
$ printf "my secret passphrase" | btk privkey
[
  "L2r6oCckVhNjAH9qqhteY8P4vH9zRDFCWnzqz35gbcSvjmoroFmD"
]
.fi
.RE

.sp
Input as JSON from a pipe:
.sp
.RS 4
.nf
$ printf "[\\"my secret passphrase\\"]" | btk privkey
[
  "L2r6oCckVhNjAH9qqhteY8P4vH9zRDFCWnzqz35gbcSvjmoroFmD"
]
.fi
.RE

.sp
Chaining commands together:
.sp
.RS 4
.nf
$ printf "my secret passphrase" | btk privkey | btk address --bech32
[
  "bc1qkxechfwttmynv92jczzjs0vrgnzlajjemmxndw"
]
.fi
.RE

.sp
.SH "OUTPUT EXAMPLES"

.sp
Single output as JSON:
.sp
.RS 4
.nf
$ btk privkey "my secret passphrase"
[
  "L2r6oCckVhNjAH9qqhteY8P4vH9zRDFCWnzqz35gbcSvjmoroFmD"
]
.fi
.RE

.sp
Multiple outputs as JSON:
.sp
.RS 4
.nf
$ btk privkey --compressed=true --compressed=false "my secret passphrase"
[
  "L2r6oCckVhNjAH9qqhteY8P4vH9zRDFCWnzqz35gbcSvjmoroFmD",
  "5K6EYmKXFCsEdYJQkfGKvj11tVakpdJiaV6QLGRdACf3fGzgvqC"
]
.fi
.RE

.sp
Multiple outputs as list:
.sp
.RS 4
.nf
$ $ btk privkey --compressed=true --compressed=false --out-format=list "my secret passphrase"
L2r6oCckVhNjAH9qqhteY8P4vH9zRDFCWnzqz35gbcSvjmoroFmD
5K6EYmKXFCsEdYJQkfGKvj11tVakpdJiaV6QLGRdACf3fGzgvqC
.fi
.RE

.sp
.SH "COMMANDS"

.PP
\fBprivkey\fR
.RS 4
Create, modify, or transform private keys.
.RE

.PP
\fBpubkey\fR
.RS 4
Generate or modify public keys.
.RE

.PP
\fBaddress\fR
.RS 4
Generate addresses from a public keys.
.RE

.PP
\fBbalance\fR
.RS 4
Query an address balance.
.RE

.PP
\fBnode\fR
.RS 4
Query data from a bitcoin node.
.RE

.PP
\fBconfig\fR
.RS 4
Configure command option default values.
.RE

.PP
\fBhelp\fR
.RS 4
Display usage info for a command.
.RE

.PP
\fBversion\fR
.RS 4
Display btk version info.
.RE

.sp
.SH "COMMAND OPTIONS"

.sp
Command options and their arguments vary based on the command being used. See \fIbtk help\fR <command> for more info.

.SH "AUTHORS"
.sp
Bitcoin toolkit was created, and is maintained, by Brian Barto. Brian can be contacted at \fBbartobrian@gmail.com\fR.